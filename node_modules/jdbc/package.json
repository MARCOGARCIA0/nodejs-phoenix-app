{
  "name": "jdbc",
  "version": "0.0.15",
  "description": "Node Module JDBC wrapper",
  "main": "index.js",
  "dependencies": {
    "java": "~0.4.4",
    "underscore": "~1.7.0",
    "promise": "~6.0.1"
  },
  "devDependencies": {
    "nodeunit": "~0.9.0"
  },
  "scripts": {
    "pretest": "java -cp drivers/hsqldb.jar org.hsqldb.server.Server --database.0 file:mydb --dbname.0 xdb >test/hsqldb.log 2>&1 &",
    "test": "nodeunit test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/CraZySacX/node-jdbc.git"
  },
  "directories": {
    "doc": ".",
    "lib": "lib"
  },
  "keywords": [
    "node",
    "jdbc",
    "wrapper"
  ],
  "engines": {
    "node": ">=0.10"
  },
  "author": {
    "name": "Jason Ozias",
    "email": "jason.g.ozias@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "node-jdbc\n=========\n\nJDBC Wrapper for node.js\n\nLatest Version\n--------------\n0.0.14\n\nSupport for adding multiple JARs to the classpath has been added.  Use the libs array as shown in\nthe initialize section below.  As of release 0.0.9, the minimum version of node.js has been increased \nto v0.10.  If you need to use this with node.js v0.8, use version 0.0.8 of node-jdbc.\n\nPlease visit [node-jdbc](https://www.npmjs.org/package/jdbc) for information on installing with npm.\n\n## Status\n[![Build Status](https://travis-ci.org/CraZySacX/node-jdbc.svg?branch=master)](https://travis-ci.org/CraZySacX/node-jdbc)\n\n\n## Usage\nCheck out [test-hsqldb.js](https://github.com/CraZySacX/node-jdbc/blob/master/test/test-hsqldb.js) for a usage example.\n\nInitialize\n----------\n```javascript\nvar jdbc = new ( require('jdbc') );\n\n// There are 3 methods to supply user/password combinations\n// In the URL\nvar configWithUserInUrl = {\n  // Required\n  libpath: __dirname + 'path/to/jdbc.jar',\n  drivername: 'com.java.driverclass',\n  // Check your driver docs for supplying the user/password in the URL.\n  url: 'url/to/database;user=SA;password=',\n  \n  // Optional\n  libs: [__dirname + 'path/to/other/jars.jar'],\n};\n\n// As key/value pairs.\nvar configWithUserInConfig = {\n  // Required\n  libpath: __dirname + 'path/to/jdbc.jar',\n  drivername: 'com.java.driverclass',\n  url: 'url/to/database',\n  \n  // Optional\n  libs: [__dirname + 'path/to/other/jars.jar'],\n  user : 'SA',\n  password: ''\n};\n\n// As an array.\nvar configWithPropertiesInConfig = {\n  // Required\n  libpath: __dirname + 'path/to/jdbc.jar',\n  drivername: 'com.java.driverclass',\n  url: 'url/to/database',\n  \n  // Optional\n  libs: [__dirname + 'path/to/other/jars.jar'],\n  properties: [\n    ['user', 'SA'],\n    ['password','']\n  ]\n};\n\nvar config = {\n  // Required\n  libpath: __dirname + 'path/to/jdbc.jar',\n  drivername: 'com.java.driverclass',\n  url: 'url/to/database',\n  \n  // Optional\n  libs: [__dirname + 'path/to/other/jars.jar'],\n  user: 'user',\n  password: 'secret',\n};\n\njdbc.initialize(config, function(err, res) {\n  if (err) {\n    console.log(err);\n  }\n});\n```\n\nOpen Connection, Execute Queries, Close\n---------------------------------------\n```javascript\nvar genericQueryHandler = function(err, results) {\n  if (err) {\n    console.log(err);\n  } else if (results) {\n    console.log(results);\n  }\n  \n  jdbc.close(function(err) {\n    if(err) {\n      console.log(err);\n    } else {\n      console.log(\"Connection closed successfully!\");\n    }\n  });\n\n};\n\njdbc.open(function(err, conn) {\n  if (conn) {\n    // SELECT statements are called with executeQuery\n    jdbc.executeQuery(\"SELECT * FROM table\", genericQueryHandler);\n\n    // Table modifying statements (UPDATE/INSERT/DELETE/etc) are called with executeUpdate\n    jdbc.executeUpdate(\"UPDATE table SET column = value\", genericQueryHandler);\n\n    // Use non-generic callbacks to handle queries individually and/or to nest queries\n    jdbc.executeUpdate(\"INSERT INTO table VALUES (value)\", function(err, results) {\n      \n      if(results > some_arbitrary_value) {\n        jdbc.executeQuery(\"SELECT * FROM table where column = value\", genericQueryHandler);\n      }\n    \n    });\n  }\n});\n\n\n```\n\nAPI\n---------------------------------\n\n### initialize(config, callback)\n - see above example for config object\n - callback(error)\n\n### open(callback)\n - opens a new connection\n - callback(error)\n\n### close(callback)\n - closes any existing connection\n - callback(error)\n\n### executeQuery(sql, callback)\n - SELECT commands.\n - callback(error, rset)\n\n### executeUpdate(sql, callback) \n - table modifying commands (INSERT, UPDATE, DELETE, etc).\n - callback(error, num_rows) where @num_rows is the number of rows modified\n",
  "bugs": {
    "url": "https://github.com/CraZySacX/node-jdbc/issues"
  },
  "_id": "jdbc@0.0.15",
  "dist": {
    "shasum": "ebeb85d8d1fe79901e1de03c890aa726dd7468d2"
  },
  "_from": "jdbc@~0.0.8",
  "_resolved": "https://registry.npmjs.org/jdbc/-/jdbc-0.0.15.tgz"
}
